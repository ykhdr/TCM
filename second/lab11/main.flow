import ds/tree;
import ds/set;
import string;
import lingo/pegcode/driver;

//Структуры программы НеМо
NmProg(
		decls : [NmDecl],
		body : NmStat,
);

NmDecl(
	var : string,
	type : NmType,
);

NmType ::= NmIntType, NmArrType;
	NmIntType();
	NmArrType(type : NmType);

NmExp ::= NmBinOp, NmUnOp, NmUpd, NmApp, NmVar, NmInt;
	NmBinOp(op: string, lhs : NmExp, rhs : NmExp);
	NmUnOp(op: string, e : NmExp);
	NmUpd(arr : NmExp, ind : NmExp, val : NmExp);
	NmApp(arr : NmExp, ind : NmExp);
	NmVar(name : string);
	NmInt(val : int);

NmStat ::= NmAssign, NmTest, NmSeq, NmChoice, NmLoop;
	NmAssign(var : string, val : NmExp);
	NmTest(cond : string, lhs : NmExp, rhs : NmExp);
	NmSeq(stats : [NmStat]);
	NmChoice(stats : [NmStat]);
	NmLoop(body : NmStat);

nmType2s(t : NmType) -> string {
	switch (t) {
		NmIntType(): "INT";
		NmArrType(a): "[" + nmType2s(a) + "]";
	}
}

nmDecl2s(d : NmDecl) -> string {
	"VAR " + d.var + " : " + nmType2s(d.type) + ";"
}

nmExp2s(e : NmExp) -> string {
	switch (e) {
		NmBinOp(op, l, r): "(" + nmExp2s(l) + " " + op + " " + nmExp2s(r) + ")";
		NmUnOp(op, e1): op + " " + nmExp2s(e1);
		NmUpd(a, i, v): "UPD(" + nmExp2s(a) + ", " + nmExp2s(i) + ", " + nmExp2s(v) + ")";
		NmApp(a, i): "APP(" + nmExp2s(a) + ", " + nmExp2s(i) + ")";
		NmVar(name): name;
		NmInt(val): i2s(val);
	}
}

nmStat2s(stat : NmStat) -> string {
	indentStr = \str -> strGlue(map(strSplit(str, "\n"), \s -> "\t" + s), "\n");
	switch (stat) {
		NmAssign(var, val): var + " := " + nmExp2s(val);
		NmTest(c, l, r): "(" + nmExp2s(l) + " " + c + " " + nmExp2s(r) + ")";
		NmSeq(ss): "{\n" + strGlue(map(ss, \s -> indentStr(nmStat2s(s))), ";\n") + "\n}";
		NmChoice(ss): "{\n" + strGlue(map(ss, \s -> indentStr(nmStat2s(s))), "U\n") + "\n}";
		NmLoop(body):  nmStat2s(body) + "*";
	}
}

nmProg2s(p : NmProg) -> string {
	strGlue(map(p.decls, nmDecl2s), "\n") + "\n" +
	nmStat2s(p.body)
}

s2nm(str : string) -> NmProg {
	parsic(nemo_parser, str, 
		SemanticActions(
			mergeTree(defaultPegActions.t,
			pairs2tree([
				Pair("createSeq", \s -> NmSeq(concat3([s[0]], [s[1]], s[2]))),
				Pair("createChoice", \s -> NmChoice(concat3([s[0]], [s[1]], s[2]))),
			]))
		)
	)
}

nemo_parser = compilePegGrammar("#include /nemo.lingo");

nmProgTypedecls(prog : NmProg, onError : (string) -> void) -> Tree<string, NmType> {
	fold(prog.decls, makeTree(), \acc, decl -> {
		if (containsKeyTree(acc, decl.var)) {
			onError("duplicate variable declararion: " + decl.var);
		}
		setTree(acc, decl.var, decl.type)
	})
}

typecheckNmProgram(prog : NmProg, onError : (string) -> void) -> void {
	typecheckNmStat(prog.body, nmProgTypedecls(prog, onError), onError)
}

typecheckNmStat(stat : NmStat, typedecls : Tree<string, NmType>, onError : (string) -> void) -> void {
	switch (stat) {
		NmAssign(var, val):
			switch (lookupTree(typedecls, var)) {
				Some(var_type): {
					maybeApply(evalNmType(val, typedecls, onError), \val_type ->
						if (val_type != var_type) { 
							onError("variable declared " + var + " type " + nmType2s(var_type) + 
									" differs from the assigned expression type: " + nmType2s(val_type)
							);
						}
					)
				}
				None(): onError("variable " + var + " is not declared");
			}
		NmTest(op, l, r):
			maybeApply(evalNmType(l, typedecls, onError), \l_type ->
				maybeApply(evalNmType(r, typedecls, onError), \r_type -> {
					if (l_type != NmIntType()) {
						onError("in comparison " + op + " left side must be of integer type, but is: " + nmType2s(l_type));
					}
					if (r_type != NmIntType()) {
						onError("in comparison " + op + " right side must be of integer type, but is: " + nmType2s(r_type));
					}
				})
			);
		NmSeq(stats):
			iter(stats, \s -> typecheckNmStat(s, typedecls, onError));
		NmChoice(stats):
			iter(stats, \s -> typecheckNmStat(s, typedecls, onError));
		NmLoop(body):
			typecheckNmStat(body, typedecls, onError)
	}
}

evalNmType(expr : NmExp, typedecls : Tree<string, NmType>, onError : (string) -> void) -> Maybe<NmType> {
	switch (expr) {
		NmBinOp(op, l, r):
			maybeBind2(
				\l_type, r_type -> {
					if (l_type != NmIntType()) {
						onError("in binary operation " + op + " left side must be of integer type, but is: " + nmType2s(l_type));
						None();
					} else {
						if (r_type != NmIntType()) {
							onError("in binary operation " + op + " right side must be of integer type, but is: " + nmType2s(r_type));
							None();
						} else {
							Some(NmIntType());
						}
					}
				}
			)
			(evalNmType(l, typedecls, onError), evalNmType(r, typedecls, onError));
		NmUnOp(op, e):
			maybeBind(evalNmType(e, typedecls, onError), 
				\e_type -> {
					if (e_type != NmIntType()) {
						onError("in unary operation " + op + " operand must be of integer type, but is: " + nmType2s(e_type));
						None()
					} else {
						Some(NmIntType());
					}
				}
			);
		NmUpd(arr, ind, upd):
			maybeBind(evalNmType(upd, typedecls, onError), \upd_type ->
				maybeBind2(
					\arr_type, ind_type -> {
						switch (arr_type) {
							NmArrType(val_type): {
								if (ind_type != NmIntType()) {
									onError("in array update operation index side must be of integer type, but is: " + nmType2s(ind_type));
									None();
								} else {
									if (upd_type == val_type) {
										Some(NmArrType(val_type));
									} else {
										onError("in array update operation update type must coincide with the array value type, but is: " + nmType2s(upd_type));
										None();
									}
								}
							}
							default: {
								onError("in array update operation array side must be of array type, but is: " + nmType2s(arr_type));
								None();
							}
						}
					}
				)
				(evalNmType(arr, typedecls, onError), evalNmType(ind, typedecls, onError))
			);
		NmApp(arr, ind):
			maybeBind2(
				\arr_type, ind_type -> {
					switch (arr_type) {
						NmArrType(val_type): {
							if (ind_type != NmIntType()) {
								onError("in array index operation index side must be of integer type, but is: " + nmType2s(ind_type));
								None();
							} else {
								Some(val_type);
							}
						}
						default: {
							onError("in array index operation array side must be of array type, but is: " + nmType2s(arr_type));
							None();
						}
					}
				}
			)
			(evalNmType(arr, typedecls, onError), evalNmType(ind, typedecls, onError));
		NmVar(name): {
			ret = lookupTree(typedecls, name);
			if (ret == None()) {
				onError("variable is not declared: " + name);
			}
			ret
		}
		NmInt(__): Some(NmIntType());
	}
}

execute(file : string){

    println("Run nemo parser");
	src = getFileContent(file);

	prog = s2nm(src);
	err_count = ref 0;
	
	err = \msg -> {
		err_count := ^err_count + 1;
		println(msg)
	}
	println("Check NeMo programm on errors");
	typecheckNmProgram(prog, err);

	if (^err_count == 0) {
        println("No errors");
		println(nmProg2s(prog));
		println("\nNemo AST:\n");
		println(prog);
        println("\n");
	}

}

main() {
	file = "test1.nm";
	execute(file);
}