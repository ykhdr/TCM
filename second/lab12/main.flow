import fs/filesystem;
import ds/set;
import ds/tree;
import string;
import lingo/pegcode/driver;


//Транслятор НеМо
NmProg(
	decls : [NmDecl],
	body : NmStat,
);

NmDecl(
	var : string,
	type : NmType,
);

NmType ::= NmIntType, NmArrType;
	NmIntType();
	NmArrType(type : NmType);

NmExp ::= NmBinOp, NmUnOp, NmUpd, NmApp, NmVar, NmInt;
	NmBinOp(op: string, lhs : NmExp, rhs : NmExp);
	NmUnOp(op: string, e : NmExp);
	NmUpd(arr : NmExp, ind : NmExp, val : NmExp);
	NmApp(arr : NmExp, ind : NmExp);
	NmVar(name : string);
	NmInt(val : int);

NmStat ::= NmAssign, NmTest, NmSeq, NmChoice, NmLoop;
	NmAssign(var : string, val : NmExp);
	NmTest(cond : string, lhs : NmExp, rhs : NmExp);
	NmSeq(stats : [NmStat]);
	NmChoice(stats : [NmStat]);
	NmLoop(body : NmStat);


//Семантическое дерево виртуальной машины
VNmProg(
	decls : [NmDecl],
	body : [VNmStat],
);

VNmStat ::= VNmAssign, VNmIf;
VNmAssign(var : string, val : NmExp, goto : [int]);
VNmIf(cond : string, lhs : NmExp, rhs : NmExp, pos : [int], neg : [int]);

VNmSeqAcc(
	stats : [[VNmStat]],
	max_lab : int
);

VNmChioceAcc(
	stats : [[VNmStat]],
	starts : [int],
	ends : [int],
	max_lab : int
);

NmVal ::= NmValInt, NmValArr;
NmValInt(val : int);
NmValArr(arr : [NmVal]);


nmType2s(t : NmType) -> string {
    	switch (t) {
		NmIntType(): "INT";
		NmArrType(a): "[" + nmType2s(a) + "]";
	}
}

nmDecl2s(d : NmDecl) -> string {
	"VAR " + d.var + " : " + nmType2s(d.type) + ";"
}

nmExp2s(e : NmExp) -> string {
	
	
	switch (e) {
		NmBinOp(op, l, r): "(" + nmExp2s(l) + " " + op + " " + nmExp2s(r) + ")";
		NmUnOp(op, e1): op + " " + nmExp2s(e1);
		NmUpd(a, i, v): "UPD(" + nmExp2s(a) + ", " + nmExp2s(i) + ", " + nmExp2s(v) + ")";
		NmApp(a, i): "APP(" + nmExp2s(a) + ", " + nmExp2s(i) + ")";
		NmVar(name): name;
		NmInt(val): i2s(val);
	}
}

nmStat2s(stat : NmStat) -> string {
	indentStr = \str -> strGlue(map(strSplit(str, "\n"), \s -> "\t" + s), "\n");
	switch (stat) {
		NmAssign(var, val): var + " := " + nmExp2s(val);
		NmTest(c, l, r): "(" + nmExp2s(l) + " " + c + " " + nmExp2s(r) + ")";
		NmSeq(ss): "{\n" + strGlue(map(ss, \s -> indentStr(nmStat2s(s))), ";\n") + "\n}";
		NmChoice(ss): "{\n" + strGlue(map(ss, \s -> indentStr(nmStat2s(s))), "U\n") + "\n}";
		NmLoop(body): "*" + nmStat2s(body);
	}
}

nmProg2s(p : NmProg) -> string {
	strGlue(map(p.decls, nmDecl2s), "\n") + "\n" +
	nmStat2s(p.body)
}

s2nm(str : string) -> NmProg {
	parsic(nemo_parser, str, 
		SemanticActions(
			mergeTree(defaultPegActions.t,
			pairs2tree([
				Pair("createSeq", \s -> NmSeq(concat3([s[0]], [s[1]], s[2]))),
				Pair("createChoice", \s -> NmChoice(concat3([s[0]], [s[1]], s[2]))),
			]))
		)
	)
}

nemo_parser = compilePegGrammar("#include nemo.lingo");

//Проверка ошибок
nmProgTypedecls(prog : NmProg, onError : (string) -> void) -> Tree<string, NmType> {
	fold(prog.decls, makeTree(), \acc, decl -> {
		if (containsKeyTree(acc, decl.var)) {
			onError("duplicate variable declararion: " + decl.var);
		}
		setTree(acc, decl.var, decl.type)
	})
}

typecheckNmProgram(prog : NmProg, onError : (string) -> void) -> void {
	typecheckNmStat(prog.body, nmProgTypedecls(prog, onError), onError)
}

typecheckNmStat(stat : NmStat, typedecls : Tree<string, NmType>, onError : (string) -> void) -> void {
	switch (stat) {
		NmAssign(var, val):
			switch (lookupTree(typedecls, var)) {
				Some(var_type): {
					maybeApply(evalNmType(val, typedecls, onError), \val_type ->
						if (val_type != var_type) { 
							onError("variable declared " + var + " type " + nmType2s(var_type) + 
									" differs from the assigned expression type: " + nmType2s(val_type)
							);
						}
					)
				}
				None(): onError("variable " + var + " is not declared");
			}
		NmTest(op, l, r):
			maybeApply(evalNmType(l, typedecls, onError), \l_type ->
				maybeApply(evalNmType(r, typedecls, onError), \r_type -> {
					if (l_type != NmIntType()) {
						onError("in comparison " + op + " left side must be of integer type, but is: " + nmType2s(l_type));
					}
					if (r_type != NmIntType()) {
						onError("in comparison " + op + " right side must be of integer type, but is: " + nmType2s(r_type));
					}
				})
			);
		NmSeq(stats):
			iter(stats, \s -> typecheckNmStat(s, typedecls, onError));
		NmChoice(stats):
			iter(stats, \s -> typecheckNmStat(s, typedecls, onError));
		NmLoop(body):
			typecheckNmStat(body, typedecls, onError)
	}
}

evalNmType(expr : NmExp, typedecls : Tree<string, NmType>, onError : (string) -> void) -> Maybe<NmType> {
	switch (expr) {
		NmBinOp(op, l, r):
			maybeBind2(
				\l_type, r_type -> {
					if (l_type != NmIntType()) {
						onError("in binary operation " + op + " left side must be of integer type, but is: " + nmType2s(l_type));
						None();
					} else {
						if (r_type != NmIntType()) {
							onError("in binary operation " + op + " right side must be of integer type, but is: " + nmType2s(r_type));
							None();
						} else {
							Some(NmIntType());
						}
					}
				}
			)
			(evalNmType(l, typedecls, onError), evalNmType(r, typedecls, onError));
		NmUnOp(op, e):
			maybeBind(evalNmType(e, typedecls, onError), 
				\e_type -> {
					if (e_type != NmIntType()) {
						onError("in unary operation " + op + " operand must be of integer type, but is: " + nmType2s(e_type));
						None()
					} else {
						Some(NmIntType());
					}
				}
			);
		NmUpd(arr, ind, upd):
			maybeBind(evalNmType(upd, typedecls, onError), \upd_type ->
				maybeBind2(
					\arr_type, ind_type -> {
						switch (arr_type) {
							NmArrType(val_type): {
								if (ind_type != NmIntType()) {
									onError("in array update operation index side must be of integer type, but is: " + nmType2s(ind_type));
									None();
								} else {
									if (upd_type == val_type) {
										Some(NmArrType(val_type));
									} else {
										onError("in array update operation update type must coincide with the array value type, but is: " + nmType2s(upd_type));
										None();
									}
								}
							}
							default: {
								onError("in array update operation array side must be of array type, but is: " + nmType2s(arr_type));
								None();
							}
						}
					}
				)
				(evalNmType(arr, typedecls, onError), evalNmType(ind, typedecls, onError))
			);
		NmApp(arr, ind):
			maybeBind2(
				\arr_type, ind_type -> {
					switch (arr_type) {
						NmArrType(val_type): {
							if (ind_type != NmIntType()) {
								onError("in array index operation index side must be of integer type, but is: " + nmType2s(ind_type));
								None();
							} else {
								Some(val_type);
							}
						}
						default: {
							onError("in array index operation array side must be of array type, but is: " + nmType2s(arr_type));
							None();
						}
					}
				}
			)
			(evalNmType(arr, typedecls, onError), evalNmType(ind, typedecls, onError));
		NmVar(name): {
			ret = lookupTree(typedecls, name);
			if (ret == None()) {
				onError("variable is not declared: " + name);
			}
			ret
		}
		NmInt(__): Some(NmIntType());
	}
}

//Функции транслятора
nm2vnm(prog : NmProg) -> Maybe<VNmProg> {
	err_count = ref 0;
	onError = \err -> {
		println("error: " + err);
		err_count := ^err_count + 1;
	}
	typecheckNmProgram(prog, onError);
	if (^err_count == 0) {
		Some(VNmProg(prog.decls, nmStat2vnmStat(prog.body)))
	} else {
		None()
	}
}

maxVmLabel(ss : [VNmStat]) -> int {
	max_lab = \labs -> fold(labs, -1, max);
	max_stat = \s -> {
		switch (s) {
			VNmAssign(__,__, goto):    max_lab(goto);
			VNmIf(__,__,__, pos, neg): max(max_lab(pos), max_lab(neg));
		}
	}
	fold(ss, -1, \acc, s -> max(acc, max_stat(s)))
}

addVmLabel(ss : [VNmStat], n : int) -> [VNmStat] {
	add_lab = \labs -> fold(labs, [], \acc, l -> concat(acc, [l + n]));
	add_stat = \s -> {
		switch (s) {
			VNmAssign(var, val, goto): VNmAssign(var, val, add_lab(goto));
			VNmIf(c, l, r, pos, neg):  VNmIf(c, l, r, add_lab(pos), add_lab(neg));
		}
	}
	fold(ss, [], \acc, s -> concat(acc, [add_stat(s)]))
}

replaceVmLabel(ss : [VNmStat], n : int, m : int) -> [VNmStat] {
	replace_lab = \labs -> fold(labs, [], \acc, l -> concat(acc, if (l == n) [m] else [l]));
	replace_stat = \s -> {
		switch (s) {
			VNmAssign(var, val, goto): VNmAssign(var, val, replace_lab(goto));
			VNmIf(c, l, r, pos, neg):  VNmIf(c, l, r, replace_lab(pos), replace_lab(neg));
		}
	}
	fold(ss, [], \acc, s -> concat(acc, [replace_stat(s)]))
}


nmStat2vnmStat(stat : NmStat) -> [VNmStat] {
	switch(stat) {
		NmAssign(var, val): [VNmAssign(var, val, [1])];
		NmTest(c, l, r): [VNmIf(c, l, r, [1], [])];
		NmSeq(ss): 
			concatA(fold(ss, VNmSeqAcc([], 0), \acc, s -> {
					vs = nmStat2vnmStat(s);
					size = maxVmLabel(vs);
					VNmSeqAcc(concat(acc.stats, [addVmLabel(vs, acc.max_lab)]), acc.max_lab + size);
				}
			).stats);
		NmChoice(ss): {
			choices = fold(ss, VNmChioceAcc([], [], [], 1), \acc, s -> {
					vs = nmStat2vnmStat(s);
					size = maxVmLabel(vs);
					VNmChioceAcc(
						concat(acc.stats, [addVmLabel(vs, acc.max_lab)]),
						concat(acc.starts, [acc.max_lab]),
						concat(acc.ends, [acc.max_lab + size]),
						acc.max_lab + size
					);
				}
			);
			concat(
				[VNmIf("==", NmInt(0), NmInt(0), choices.starts, [])],
				foldi(choices.stats, [], \i, acc, s ->
					concat(acc, replaceVmLabel(s, choices.ends[i], choices.max_lab))
				)
			);
		}
		NmLoop(b): {
			vs = addVmLabel(nmStat2vnmStat(b), 1);
			size = maxVmLabel(vs);
			concat(
				[VNmIf("==", NmInt(0), NmInt(0), [1, size], [])],
				replaceVmLabel(vs, size, 0)
			)
		}
	}
}


vnmStat2s(s : VNmStat) -> string {
	switch (s) {
		VNmAssign(var, val, goto): var + " := " + nmExp2s(val) + " goto {" + strGlue(map(goto, i2s), " ") + "}";
		VNmIf(c, l, r, pos, neg): 
			"if (" + nmExp2s(l) + " " + c + " " + nmExp2s(r) + ") " +
			"then {" + strGlue(map(pos, i2s), ", ") + "} " + 
			"else {" + strGlue(map(neg, i2s), ", ") + "}";
	}
}

vnmProg2s(p : VNmProg) -> string {
	fold(p.decls, "", \acc, decl -> acc + nmDecl2s(decl) + "\n") + "\n" +
	foldi(p.body, "", \i, acc, s -> acc + i2s(i) + ": " + vnmStat2s(s) + "\n") +
	i2s(maxVmLabel(p.body)) + ":"
}

execute(file : string){
		src = getFileContent(file);
		prog = s2nm(src);
		err_count = ref 0;
		
		err = \msg -> {
			err_count := ^err_count + 1;
			println(msg)
		}
	
		typecheckNmProgram(prog, err);
		if (^err_count == 0) {
            switch (nm2vnm(prog)) {
                Some(vprog): {
                    file_desc = changeFileExt(file, ".vnm");
                    
                    vnm_str = vnmProg2s(vprog);
                    setFileContent(file_desc, vnm_str);
                    println(vnm_str);
                }
                None(): { }
            }
		}
}

main() {
	fname = "test0.nm";
	execute(fname);
}